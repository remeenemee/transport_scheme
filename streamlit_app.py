import streamlit as st
import folium
from streamlit_folium import st_folium
import pandas as pd
from geopy.geocoders import Nominatim
from tenacity import retry, stop_after_attempt, wait_fixed
import openrouteservice
from openrouteservice import convert
import time
import random
from datetime import datetime
import traceback
import io
import base64
from PIL import Image
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(layout="wide", page_title="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", page_icon="üöö")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'delivery_data' not in st.session_state:
    st.session_state.delivery_data = []

if 'geocode_cache' not in st.session_state:
    st.session_state.geocode_cache = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞ –æ—à–∏–±–æ–∫
if 'error_log' not in st.session_state:
    st.session_state.error_log = []

if 'debug_mode' not in st.session_state:
    st.session_state.debug_mode = False

    if 'ors_api_key' not in st.session_state:
        st.session_state.ors_api_key = ""

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
def log_error(message, error_type="ERROR", details=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    error_entry = {
        "time": timestamp,
        "type": error_type,
        "message": message,
        "details": details if details else ""
    }
    st.session_state.error_log.append(error_entry)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)
    if len(st.session_state.error_log) > 50:
        st.session_state.error_log = st.session_state.error_log[-50:]

def log_info(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
    log_error(message, "INFO")

def log_warning(message, details=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –ª–æ–≥"""
    log_error(message, "WARNING", details)

def log_api_error(api_name, error, details=None):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ API"""
    error_message = f"–û—à–∏–±–∫–∞ API {api_name}: {str(error)}"
    full_details = f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {details}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}" if details else traceback.format_exc()
    log_error(error_message, "API_ERROR", full_details)

# --- –°–ª–æ–≤–∞—Ä–∏ ---
MATERIAL_COLORS = {
    "–ê—Å—Ñ–∞–ª—å—Ç–æ–±–µ—Ç–æ–Ω": "black",
    "–ü–µ—Å–æ–∫, —â–µ–±–µ–Ω—å, –≥—Ä—É–Ω—Ç": "brown",
    "–¢—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥—ã": "blue",
    "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è": "red",
    "–ë–µ—Ç–æ–Ω": "gray"
}

MATERIALS = list(MATERIAL_COLORS.keys())

# --- –£—Ç–∏–ª–∏—Ç—ã ---

def normalize_address(addr):
    addr = addr.strip()
    addr = addr.replace("  ", " ")
    addr = addr.replace("–≥.", "–≥–æ—Ä–æ–¥")
    addr = addr.replace("–ø–æ—Å.", "–ø–æ—Å—ë–ª–æ–∫")
    addr = addr.replace("–æ–±–ª.", "–æ–±–ª–∞—Å—Ç—å")
    addr = addr.replace("—É–ª.", "—É–ª–∏—Ü–∞")
    return addr

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
def geocode_address(address):
    user_agent = f"transport_app_{random.randint(1000, 9999)}"
    geolocator = Nominatim(user_agent=user_agent)
    try:
        log_info(f"–ó–∞–ø—Ä–æ—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        time.sleep(1.5 + random.uniform(0.5, 1.0))
        location = geolocator.geocode(address, timeout=10)
        if location:
            log_info(f"–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {location.address}")
            return (location.latitude, location.longitude), location.address
        else:
            log_warning(f"–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
            return None, None
    except Exception as e:
        log_api_error("Nominatim", e, f"–ê–¥—Ä–µ—Å: {address}")
        return None, None

def geocode_address_cached(address):
    normalized = normalize_address(address)
    if normalized in st.session_state.geocode_cache:
        log_info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: {normalized}")
        return st.session_state.geocode_cache[normalized]
    coords, full_addr = geocode_address(normalized)
    st.session_state.geocode_cache[normalized] = (coords, full_addr)
    return coords, full_addr

# --- –ó–∞–ø—Ä–æ—Å API-–∫–ª—é—á–∞ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ---
def init_ors_client():
    try:
        if st.session_state.ors_api_key:
            ors_client = openrouteservice.Client(key=st.session_state.ors_api_key)
            log_info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouteService —É—Å–ø–µ—à–Ω–æ")
            return ors_client
        else:
            return None
    except Exception as e:
        log_api_error("OpenRouteService", e, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
        return None

# –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç ORS –µ—Å–ª–∏ API-–∫–ª—é—á —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
ors_client = init_ors_client()

def get_route_ors(origin_coords, destination_coords):
    """
    origin_coords: (lat, lon)
    destination_coords: (lat, lon)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –º–∞—Ä—à—Ä—É—Ç (—Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç), —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
    """
    try:
        log_info(f"–ó–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞ ORS –æ—Ç {origin_coords} –¥–æ {destination_coords}")
        coords = [(origin_coords[1], origin_coords[0]), (destination_coords[1], destination_coords[0])]

        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        log_info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ ORS: coordinates={coords}, profile='driving-car'")

        # –£–±–∏—Ä–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä extra_info
        result = ors_client.directions(
            coordinates=coords,
            profile='driving-car',
            format='geojson'
            # –£–±—Ä–∞–ª–∏: extra_info=['total_distance'] - —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É 2003
        )

        log_info("–ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ORS API")

        geometry = result['features'][0]['geometry']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if geometry['type'] == 'LineString':
            # –û–±—ã—á–Ω–∞—è LineString –≥–µ–æ–º–µ—Ç—Ä–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
            route_coords = [(point[1], point[0]) for point in geometry['coordinates']]  # (lat, lon)
        else:
            # –ï—Å–ª–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            decoded = convert.decode_polyline(geometry)
            route_coords = [(point[1], point[0]) for point in decoded['coordinates']]  # (lat, lon)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ –º–∞—Ä—à—Ä—É—Ç–∞
        distance_meters = result['features'][0]['properties']['segments'][0]['distance']
        distance_km = round(distance_meters / 1000, 2)

        log_info(f"–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km} –∫–º, —Ç–æ—á–µ–∫: {len(route_coords)}")
        return route_coords, distance_km

    except Exception as e:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ API
        error_details = f"–û—Ç: {origin_coords}, –î–æ: {destination_coords}"
        if hasattr(e, 'response') and e.response:
            error_details += f"\nHTTP —Å—Ç–∞—Ç—É—Å: {e.response.status_code}"
            try:
                error_details += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.json()}"
            except:
                error_details += f"\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}"
        elif hasattr(e, 'args') and e.args:
            error_details += f"\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.args[0]}"

        log_api_error("OpenRouteService", e, error_details)

        # –†–µ–∑–µ—Ä–≤: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π
        try:
            from geopy.distance import geodesic
            dist = round(geodesic(origin_coords, destination_coords).kilometers, 2)
            log_warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç –ø–æ –ø—Ä—è–º–æ–π: {dist} –∫–º", "–û—à–∏–±–∫–∞ ORS API")
            return None, dist
        except Exception as fallback_error:
            log_api_error("Geopy", fallback_error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ –ø—Ä—è–º–æ–π")
            return None, 0

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title("üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

# --- –ó–∞–ø—Ä–æ—Å API-–∫–ª—é—á–∞, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ---
if not st.session_state.ors_api_key:
    st.warning("‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º API-–∫–ª—é—á OpenRouteService")

    with st.form("api_key_form"):
        api_key = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á OpenRouteService",
            help="–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–∞–π—Ç–µ https://openrouteservice.org/dev/#/signup",
            type="password"
        )

        sample_key = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-–∫–ª—é—á")

        submit = st.form_submit_button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

        if submit:
            if sample_key:
                api_key = ""

            if api_key:
                st.session_state.ors_api_key = api_key
                try:
                    ors_client = openrouteservice.Client(key=api_key)
                    st.success("‚úÖ API-–∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    st.rerun()
                except Exception as e:
                    log_api_error("OpenRouteService", e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API-–∫–ª—é—á–∞")
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API-–∫–ª—é—á–∞: {str(e)}")
            else:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á")

    st.markdown("""
    ### –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á OpenRouteService
    1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç [OpenRouteService](https://openrouteservice.org/dev/#/signup)
    2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
    3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "Dashboard" –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ
    """)

    st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞

# --- –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ ---
with st.sidebar:
    st.header("üêõ –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
    debug_mode = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏", value=st.session_state.debug_mode)
    st.session_state.debug_mode = debug_mode

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥"):
            st.session_state.error_log = []
            st.rerun()

    with col2:
        if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞"):
            if st.session_state.error_log:
                log_text = "\n".join([
                    f"[{entry['time']}] {entry['type']}: {entry['message']}"
                    + (f"\n{entry['details']}" if entry['details'] else "")
                    for entry in st.session_state.error_log
                ])
                st.text_area("–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞ –æ—à–∏–±–æ–∫", log_text, height=200)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∞ –æ—à–∏–±–æ–∫
    st.subheader("üìã –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π")

    if st.session_state.error_log:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        filter_types = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º:",
            ["ERROR", "API_ERROR", "WARNING", "INFO"],
            default=["ERROR", "API_ERROR", "WARNING"] if not debug_mode else ["ERROR", "API_ERROR", "WARNING", "INFO"]
        )

        filtered_log = [entry for entry in st.session_state.error_log if entry['type'] in filter_types]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for entry in reversed(filtered_log[-20:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            if entry['type'] == 'ERROR' or entry['type'] == 'API_ERROR':
                st.error(f"**[{entry['time']}]** {entry['message']}")
            elif entry['type'] == 'WARNING':
                st.warning(f"**[{entry['time']}]** {entry['message']}")
            elif entry['type'] == 'INFO' and debug_mode:
                st.info(f"**[{entry['time']}]** {entry['message']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
            if entry['details'] and debug_mode:
                with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"):
                    st.code(entry['details'], language="text")
    else:
        st.info("–õ–æ–≥ –ø—É—Å—Ç")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.header("1. –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

col1, col2 = st.columns(2)

with col1:
    material = st.selectbox("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", MATERIALS, key="mat")
    work_type = st.text_input(
        "–í–∏–¥ —Ä–∞–±–æ—Ç",
        value="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–¥–µ–∂–¥—ã",
        help="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—Å—ã–ø–∏, –æ—Å–Ω–æ–≤–∞–Ω–∏—è, –ø–æ–¥—Å—Ç–∏–ª–∞—é—â–µ–≥–æ —Å–ª–æ—è"
    )
    supplier_name = st.text_input(
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
        value="–ì–ü–ö–û \"–î–≠–ü ‚Ññ2\"",
        help="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–û–û \"–°–ê–ù–¢–ï–†–ú–û\""
    )
    supplier_address = st.text_area(
        "–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
        value="–ü—Ä–∞–≤–¥–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –≥–æ—Ä–æ–¥ –ü—Ä–∞–≤–¥–∏–Ω—Å–∫, –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —É–ª., –¥.1",
        height=100
    )

with col2:
    st.subheader("üìç –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ (–º–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)")
    use_object_coords = st.checkbox("–í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é")
    if use_object_coords:
        obj_coord_input = st.text_input("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)", "")
    else:
        object_address = st.text_input(
            "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
            value="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª., –ì—É—Ä—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å. –ù–µ–≤—Å–∫–æ–µ, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. –ó–î. 229"
        )

# --- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"):
    log_info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

    # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    if use_object_coords:
        try:
            lat, lon = map(float, [x.strip() for x in obj_coord_input.split(",")])
            if -90 <= lat <= 90 and -180 <= lon <= 180:
                obj_coords = (lat, lon)
                obj_full_addr = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}"
                log_info(f"–í–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é: {obj_coords}")
            else:
                error_msg = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
                log_error(error_msg)
                st.error(error_msg)
                st.stop()
        except Exception as e:
            error_msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä–µ–∫—Ç–∞"
            log_error(error_msg, details=str(e))
            st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, 54.7100, 20.4800")
            st.stop()
    else:
        obj_coords, obj_full_addr = geocode_address_cached(object_address)
        if obj_coords is None:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞: {object_address}"
            log_error(error_msg)
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.")
            st.stop()

    # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    use_supplier_coords = st.checkbox("–í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤—Ä—É—á–Ω—É—é", key="supp_coords")
    if use_supplier_coords:
        supp_coord_input = st.text_input("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)", key="supp_input")
        try:
            lat, lon = map(float, [x.strip() for x in supp_coord_input.split(",")])
            if -90 <= lat <= 90 and -180 <= lon <= 180:
                sup_coords = (lat, lon)
                sup_full_addr = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}"
                log_info(f"–í–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤—Ä—É—á–Ω—É—é: {sup_coords}")
            else:
                error_msg = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
                log_error(error_msg)
                st.error(error_msg)
                st.stop()
        except Exception as e:
            error_msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
            log_error(error_msg, details=str(e))
            st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, 54.7100, 20.4800")
            st.stop()
    else:
        sup_coords, sup_full_addr = geocode_address_cached(supplier_address)
        if sup_coords is None:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_address}"
            log_error(error_msg)
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.")
            st.stop()

    # –†–∞—Å—á—ë—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –¥–æ—Ä–æ–≥–∞–º
    log_info("–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞")
    route_coords, road_distance = get_route_ors(sup_coords, obj_coords)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    idx = len(st.session_state.delivery_data) + 1
    st.session_state.delivery_data.append({
        "‚Ññ –ø/–ø": idx,
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": material,
        "% –æ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏": 100,
        "–í–∏–¥ —Ä–∞–±–æ—Ç": work_type,
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": supplier_name,
        "–ê–¥—Ä–µ—Å": sup_full_addr,
        "–í–∏–¥ \"—Ñ—Ä–∞–Ω–∫–æ\" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": "-",
        "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %": "-",
        "–°—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–±—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª": obj_full_addr,
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º": road_distance,
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %": 100,
        "–°—Ä–µ–¥–Ω—è—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–∫–∏, –∫–º": road_distance,
        "–¶–≤–µ—Ç": MATERIAL_COLORS[material],
        "supplier_coords": sup_coords,
        "object_coords": obj_coords,
        "route_coords": route_coords
    })

    log_info(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: {supplier_name}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {road_distance} –∫–º")

    success_msg = f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ ¬´{supplier_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ "
    if route_coords:
        success_msg += f"–ø–æ –¥–æ—Ä–æ–≥–∞–º: {road_distance} –∫–º"
    else:
        success_msg += f"–ø–æ –ø—Ä—è–º–æ–π: {road_distance} –∫–º (–º–∞—Ä—à—Ä—É—Ç –ø–æ –¥–æ—Ä–æ–≥–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

    st.success(success_msg)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ---
def export_to_excel(df, columns_to_show):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–∫–∞—á–∏–≤–∞–µ–º–æ–π —Å—Å—ã–ª–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    export_df = df[columns_to_show].copy()

    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞
    output = io.BytesIO()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        export_df.to_excel(writer, sheet_name='–í–µ–¥–æ–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤', index=False)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç workbook –∏ worksheet
        workbook = writer.book
        worksheet = writer.sheets['–í–µ–¥–æ–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤']

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for i, col in enumerate(export_df.columns):
            column_width = max(export_df[col].astype(str).map(len).max(), len(col) + 2)
            worksheet.set_column(i, i, column_width)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞
    processed_data = output.getvalue()

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    b64 = base64.b64encode(processed_data).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="–í–µ–¥–æ–º–æ—Å—Ç—å_–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.xlsx">üì• –°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª</a>'

    return href

    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞, —Ç.–∫. tkinter –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏

def save_map_screenshot(html_content, width=1200, height=800):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–≤–µ—Ä—Å–∏—é –∫–∞—Ä—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º HTML –≤ base64 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        b64 = base64.b64encode(html_content.encode()).decode()
        href = f'<a href="data:text/html;charset=utf-8;base64,{b64}" download="transport_map.html">üì• –°–∫–∞—á–∞—Ç—å HTML –∫–∞—Ä—Ç—ã</a>'
        st.markdown(href, unsafe_allow_html=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã.")

        return True
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")
        return False

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
st.header("üìã –í–µ–¥–æ–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

if st.session_state.delivery_data:
    df = pd.DataFrame(st.session_state.delivery_data)
    columns_to_show = [
        "‚Ññ –ø/–ø",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        "% –æ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
        "–í–∏–¥ —Ä–∞–±–æ—Ç",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
        "–ê–¥—Ä–µ—Å",
        "–í–∏–¥ \"—Ñ—Ä–∞–Ω–∫–æ\" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %",
        "–°—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–±—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª",
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º",
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %",
        "–°—Ä–µ–¥–Ω—è—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–∫–∏, –∫–º"
    ]
    st.dataframe(df[columns_to_show], use_container_width=True)

    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    excel_href = export_to_excel(df, columns_to_show)
    st.markdown(excel_href, unsafe_allow_html=True)

    # --- –ö–∞—Ä—Ç–∞ ---
    st.header("üó∫Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    first_obj = st.session_state.delivery_data[0]
    m = folium.Map(location=first_obj["object_coords"], zoom_start=10)

    # –û–±—ä–µ–∫—Ç - —Ç–µ–ø–µ—Ä—å –º–∞–ª–µ–Ω—å–∫–∞—è –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞
    folium.CircleMarker(
        first_obj["object_coords"],
        radius=5,  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å
        color="red",
        fill=True,
        fill_opacity=1.0,
        popup="–ú–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞",
        tooltip="–û–±—ä–µ–∫—Ç"
    ).add_to(m)

    # –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
    for record in st.session_state.delivery_data:
        sup_coords = record["supplier_coords"]
        color = record["–¶–≤–µ—Ç"]
        idx = record["‚Ññ –ø/–ø"]

        # –£–±—Ä–∞–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä

        # –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø–æ–ø–∞–ø–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        folium.Marker(
            sup_coords,
            popup=f"‚Ññ{idx}: {record['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']}",
            tooltip=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ ‚Ññ{idx}",
            icon=folium.DivIcon(html=f"""
            <div style="
                background: {color};
                color: white;
                border-radius: 50%;
                width: 24px;
                height: 24px;
                text-align: center;
                line-height: 24px;
                font-weight: bold;
                font-size: 14px;
                box-shadow: 1px 1px 3px rgba(0,0,0,0.4);
            ">{idx}</div>""")
        ).add_to(m)

        # –ú–∞—Ä—à—Ä—É—Ç
        route_coords = record.get("route_coords")
        if route_coords:
            folium.PolyLine(
                locations=route_coords,
                weight=5,
                color=color,
                opacity=0.8,
                tooltip=f"{record['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞']} ‚Üí {record['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º']} –∫–º (–ø–æ –¥–æ—Ä–æ–≥–∞–º)"
            ).add_to(m)
        else:
            # –†–µ–∑–µ—Ä–≤ ‚Äî –ø—Ä—è–º–∞—è
            folium.PolyLine(
                locations=[sup_coords, record["object_coords"]],
                weight=3,
                color=color,
                dash_array="10",
                opacity=0.6,
                tooltip=f"{record['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞']} ‚Üí {record['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º']} –∫–º (–ø–æ –ø—Ä—è–º–æ–π)"
            ).add_to(m)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã –≤ session_state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ HTML
    folium_map = st_folium(m, width="100%", height=600, returned_objects=["last_object_clicked"])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    col1, col2 = st.columns(2)

    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"):
            # –ü–æ–ª—É—á–∞–µ–º HTML –∫–∞—Ä—Ç—ã
            map_html = m._repr_html_()
            save_map_screenshot(map_html)
            st.success("‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!")

    with col2:
        # –û—á–∏—Å—Ç–∫–∞
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"):
            log_info("–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
            st.session_state.delivery_data = []
            st.session_state.geocode_cache = {}
            st.rerun()

else:
    st.info("–î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é —Å—Ö–µ–º—É.")

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø–æ–¥–≤–∞–ª–µ ---
if st.session_state.error_log:
    error_count = len([e for e in st.session_state.error_log if e['type'] in ['ERROR', 'API_ERROR']])
    warning_count = len([e for e in st.session_state.error_log if e['type'] == 'WARNING'])

    if error_count > 0 or warning_count > 0:
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–û—à–∏–±–∫–∏", error_count)
        with col2:
            st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", warning_count)
        with col3:
            st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", len(st.session_state.error_log))