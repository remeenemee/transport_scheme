import streamlit as st
from utils import log_info

def display_debug_button():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏"""
    if st.button("üêõ –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏"):
        st.session_state.show_debug = True

def display_debug_sidebar(session_state):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.header("üêõ –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏"):
            st.session_state.show_debug = False
            st.rerun()

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
        debug_mode = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏", value=session_state.debug_mode)
        session_state.debug_mode = debug_mode

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥"):
                session_state.error_log = []
                st.rerun()

        with col2:
            if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞"):
                if session_state.error_log:
                    log_text = "\n".join([
                        f"[{entry['time']}] {entry['type']}: {entry['message']}"
                        + (f"\n{entry['details']}" if entry['details'] else "")
                        for entry in session_state.error_log
                    ])
                    st.text_area("–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞ –æ—à–∏–±–æ–∫", log_text, height=200)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∞ –æ—à–∏–±–æ–∫
        st.subheader("üìã –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π")

        if session_state.error_log:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
            filter_types = st.multiselect(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º:",
                ["ERROR", "API_ERROR", "WARNING", "INFO"],
                default=["ERROR", "API_ERROR", "WARNING"] if not debug_mode else ["ERROR", "API_ERROR", "WARNING", "INFO"]
            )

            filtered_log = [entry for entry in session_state.error_log if entry['type'] in filter_types]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for entry in reversed(filtered_log[-20:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
                if entry['type'] == 'ERROR' or entry['type'] == 'API_ERROR':
                    st.error(f"**[{entry['time']}]** {entry['message']}")
                elif entry['type'] == 'WARNING':
                    st.warning(f"**[{entry['time']}]** {entry['message']}")
                elif entry['type'] == 'INFO' and debug_mode:
                    st.info(f"**[{entry['time']}]** {entry['message']}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
                if entry['details'] and debug_mode:
                    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"):
                        st.code(entry['details'], language="text")
        else:
            st.info("–õ–æ–≥ –ø—É—Å—Ç")

def display_error_stats(session_state):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏
    if session_state.show_debug and session_state.error_log:
        error_count = len([e for e in session_state.error_log if e['type'] in ['ERROR', 'API_ERROR']])
        warning_count = len([e for e in session_state.error_log if e['type'] == 'WARNING'])

        if error_count > 0 or warning_count > 0:
            st.markdown("---")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–û—à–∏–±–∫–∏", error_count)
            with col2:
                st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", warning_count)
            with col3:
                st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", len(session_state.error_log))
