import streamlit as st
import folium
from streamlit_folium import st_folium
import pandas as pd
import os
from geopy.distance import geodesic
from utils import (
    log_error, log_info, log_warning, log_api_error,
    geocode_address_cached, init_ors_client, get_route_ors,
    MATERIAL_COLORS, AVAILABLE_COLORS, MATERIALS
)
from export_utils import export_to_excel, save_map_screenshot
import tkinter as tk
from tkinter import filedialog

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(layout="wide", page_title="–ú–æ–¥—É–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤", page_icon="üè≠")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'delivery_data' not in st.session_state:
    st.session_state.delivery_data = []

if 'geocode_cache' not in st.session_state:
    st.session_state.geocode_cache = {}

if 'error_log' not in st.session_state:
    st.session_state.error_log = []

if 'ors_api_key' not in st.session_state:
    st.session_state.ors_api_key = ""
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ secrets
    try:
        if 'api_keys' in st.secrets and 'ors_api_key' in st.secrets['api_keys']:
            st.session_state.ors_api_key = st.secrets['api_keys']['ors_api_key']
            log_info(st.session_state, "API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ secrets")
    except Exception as e:
        log_warning(st.session_state, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ secrets")


# –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç ORS –µ—Å–ª–∏ API-–∫–ª—é—á —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
ors_client = init_ors_client(st.session_state)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
if 'selected_suppliers' not in st.session_state:
    st.session_state.selected_suppliers = []

if 'object_coords' not in st.session_state:
    st.session_state.object_coords = None

if 'object_address' not in st.session_state:
    st.session_state.object_address = ""

if 'suppliers_df' not in st.session_state:
    st.session_state.suppliers_df = None

if 'filtered_suppliers' not in st.session_state:
    st.session_state.filtered_suppliers = None

if 'selected_okved' not in st.session_state:
    st.session_state.selected_okved = None

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.title("–ú–æ–¥—É–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞
def load_suppliers():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        root = tk.Tk()
        root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (CSV)",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )

        if not file_path:
            st.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return None, []

        if os.path.exists(file_path):
            df = pd.read_csv(file_path)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = df.fillna('')
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            df['lat'] = 0.0
            df['lon'] = 0.0

            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ G ("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            for idx, row in df.iterrows():
                if row['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'] and isinstance(row['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'], str):
                    try:
                        lat, lon = map(float, row['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'].split(','))
                        df.at[idx, 'lat'] = lat
                        df.at[idx, 'lon'] = lon
                    except:
                        pass

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ
            df['info'] = df.apply(lambda row: f"{row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}\n–ò–ù–ù: {row['–ò–ù–ù']}\n–ê–¥—Ä–µ—Å: {row['–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏']}", axis=1)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –û–ö–í–≠–î –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            okved_list = df['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'].unique().tolist()
            okved_list = [x for x in okved_list if x]
            okved_list.sort()

            log_info(st.session_state, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞")

            return df, okved_list
        else:
            log_error(st.session_state, f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return None, []
    except Exception as e:
        log_error(st.session_state, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {str(e)}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None, []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
def handle_supplier_click(clicked_point):
    if clicked_point and st.session_state.object_coords and st.session_state.filtered_suppliers is not None:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
        lat, lon = clicked_point['lat'], clicked_point['lng']

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        closest_supplier = None
        min_distance = float('inf')

        for idx, row in st.session_state.filtered_suppliers.iterrows():
            supplier_coords = (row['lat'], row['lon'])
            click_coords = (lat, lon)

            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫–ª–∏–∫–∞ –¥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            distance = geodesic(click_coords, supplier_coords).kilometers

            # –ï—Å–ª–∏ —ç—Ç–æ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∫ –∫–ª–∏–∫—É
            if distance < min_distance and distance < 10:  # –ü–æ—Ä–æ–≥ –≤ 10 –∫–º
                min_distance = distance
                closest_supplier = row

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∫–ª–∏–∫–∞
        if closest_supplier is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
            supplier_name = closest_supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']
            already_selected = any(s['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'] == supplier_name for s in st.session_state.selected_suppliers)

            if not already_selected:
                # –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –¥–æ—Ä–æ–≥–∞–º
                supplier_coords = (closest_supplier['lat'], closest_supplier['lon'])
                route_coords, road_distance = get_route_ors(
                    st.session_state,
                    ors_client,
                    supplier_coords,
                    st.session_state.object_coords
                )

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                color_name = st.session_state.get('color_select', "–°–∏–Ω–∏–π")
                selected_color = AVAILABLE_COLORS[color_name]

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                obj_full_addr = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {st.session_state.object_coords[0]:.5f}, {st.session_state.object_coords[1]:.5f}"
                if st.session_state.object_address:
                    obj_full_addr = st.session_state.object_address

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                idx = len(st.session_state.delivery_data) + 1

                # –ó–∞–ø–∏—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                supplier_data = {
                    "‚Ññ –ø/–ø": idx,
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": closest_supplier['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'],
                    "% –æ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏": 100,
                    "–í–∏–¥ —Ä–∞–±–æ—Ç": "–ü–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": f"{closest_supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']} (–ò–ù–ù: {closest_supplier['–ò–ù–ù']})",
                    "–ê–¥—Ä–µ—Å": closest_supplier['–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏'],
                    "–í–∏–¥ \"—Ñ—Ä–∞–Ω–∫–æ\" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": "-",
                    "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %": "-",
                    "–°—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–±—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª": obj_full_addr,
                    "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º": road_distance,
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %": 100,
                    "–°—Ä–µ–¥–Ω—è—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–∫–∏, –∫–º": road_distance,
                    "–¶–≤–µ—Ç": selected_color,
                    "supplier_coords": supplier_coords,
                    "object_coords": st.session_state.object_coords,
                    "route_coords": route_coords,
                    "–ò–ù–ù": closest_supplier['–ò–ù–ù']
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –≤ —Å–µ—Å—Å–∏—é
                st.session_state.delivery_data.append(supplier_data)
                st.session_state.selected_suppliers.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": closest_supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'],
                    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": supplier_coords,
                    "–ú–∞—Ä—à—Ä—É—Ç": route_coords,
                    "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ": road_distance,
                    "–û–ö–í–≠–î": closest_supplier['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'],
                    "–¶–≤–µ—Ç": selected_color
                })

                log_info(st.session_state, f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {road_distance} –∫–º")
                return True

    return False

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
col1, col2 = st.columns([1, 2])

with col1:
    st.header("1.–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç")

    # –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ
    use_object_coords = st.checkbox("–í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é")

    if use_object_coords:
        obj_coord_input = st.text_input("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)", "")
        if obj_coord_input:
            try:
                lat, lon = map(float, [x.strip() for x in obj_coord_input.split(",")])
                if -90 <= lat <= 90 and -180 <= lon <= 180:
                    st.session_state.object_coords = (lat, lon)
                    st.session_state.object_address = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}"
                    st.success("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                else:
                    st.error("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            except Exception as e:
                st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, 54.7100, 20.4800")
    else:
        object_address = st.text_input(
            "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
            value="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª., –ì—É—Ä—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å. –ù–µ–≤—Å–∫–æ–µ, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. –ó–î. 229"
        )

        if st.button("üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞"):
            obj_coords, obj_full_addr = geocode_address_cached(st.session_state, object_address)
            if obj_coords is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.")
            else:
                st.session_state.object_coords = obj_coords
                st.session_state.object_address = obj_full_addr
                st.success(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {obj_coords[0]:.5f}, {obj_coords[1]:.5f}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    st.header("2.–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    if st.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"):
        df, okved_list = load_suppliers()
        if df is not None:
            st.session_state.suppliers_df = df
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –û–ö–í–≠–î
    if st.session_state.suppliers_df is not None:
        st.header("3.–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –û–ö–í–≠–î
        okved_list = st.session_state.suppliers_df['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'].unique().tolist()
        okved_list = [x for x in okved_list if x]
        okved_list.sort()

        # –í—ã–±–æ—Ä –û–ö–í–≠–î
        okved_list.insert(0, "–ù–∏—á–µ–≥–æ")  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–∏—á–µ–≥–æ" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        selected_okved = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –û–ö–í–≠–î –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
            okved_list,
            index=0,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ù–∏—á–µ–≥–æ" –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é..."
        )

        if selected_okved:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –û–ö–í–≠–î
            filtered_df = st.session_state.suppliers_df[
                st.session_state.suppliers_df['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'] == selected_okved
            ]

            st.session_state.filtered_suppliers = filtered_df
            st.session_state.selected_okved = selected_okved

            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –û–ö–í–≠–î: {selected_okved}")

            # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –∫–∞—Ä—Ç–æ–π
            st.info("‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ—á–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≤–µ–¥–æ–º–æ—Å—Ç—å")
        else:
            st.session_state.filtered_suppliers = None
            st.session_state.selected_okved = None
            st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if st.session_state.filtered_suppliers is not None:
        st.header("4.–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞")

        color_name = st.selectbox("–¶–≤–µ—Ç –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞", list(AVAILABLE_COLORS.keys()), key="color_select")
        selected_color = AVAILABLE_COLORS[color_name]

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        st.markdown(f"<div style='background-color: {selected_color}; width: 100%; height: 20px; border-radius: 5px;'></div>", unsafe_allow_html=True)

with col2:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    st.header("–ö–∞—Ä—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if not st.session_state.ors_api_key:
        st.warning("‚ö†Ô∏è API-–∫–ª—é—á OpenRouteService –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å '–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π API-–∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'.")

    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –∑–∞–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if st.session_state.object_coords is None:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞")
    elif st.session_state.filtered_suppliers is None:
        st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –û–ö–í–≠–î")
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        m = folium.Map(location=st.session_state.object_coords, zoom_start=10)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç - –º–∞–ª–µ–Ω—å–∫–∞—è –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞
        folium.CircleMarker(
            st.session_state.object_coords,
            radius=10,  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å
            color="red",
            fill=True,
            fill_opacity=1.0,
            popup=folium.Popup("–û–±—ä–µ–∫—Ç", max_width=200),
            tooltip="–û–±—ä–µ–∫—Ç"

        ).add_to(m)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        for idx, row in st.session_state.filtered_suppliers.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
            if row['lat'] != 0 and row['lon'] != 0:
                # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                popup_text = f"""<b>{row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}</b><br>
                                –ò–ù–ù: {row['–ò–ù–ù']}<br>
                                –û–ö–í–≠–î: {row['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)']}<br>
                                –ê–¥—Ä–µ—Å: {row['–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏']}"""

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                folium.CircleMarker(
                    [row['lat'], row['lon']],
                    popup=folium.Popup(popup_text, max_width=300),
                    tooltip=row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'],
                    radius=5,  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å
                    color="blue",
                    fill=True,
                    fill_opacity=1.0,
                ).add_to(m)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
        for i, supplier in enumerate(st.session_state.selected_suppliers):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            sup_coords = supplier['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']
            idx = i + 1  # –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

            # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
            color = list(AVAILABLE_COLORS.values())[i % len(AVAILABLE_COLORS)]

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º
            folium.Marker(
                sup_coords,
                popup=f"‚Ññ{idx}: {supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}",
                tooltip=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ ‚Ññ{idx}",
                icon=folium.DivIcon(html=f"""
                <div style="
                    background: {supplier.get('–¶–≤–µ—Ç', color)};
                    color: white;
                    border-radius: 50%;
                    width: 24px;
                    height: 24px;
                    text-align: center;
                    line-height: 24px;
                    font-weight: bold;
                    font-size: 14px;
                    box-shadow: 1px 1px 3px rgba(0,0,0,0.4);
                ">{idx}</div>""")
            ).add_to(m)

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç
            route_coords = supplier['–ú–∞—Ä—à—Ä—É—Ç']
            if route_coords:
                folium.PolyLine(
                    locations=route_coords,
                    weight=5,
                    color=supplier.get('–¶–≤–µ—Ç', color),
                    opacity=0.8,
                    tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –¥–æ—Ä–æ–≥–∞–º)"
                ).add_to(m)
            else:
                # –†–µ–∑–µ—Ä–≤ ‚Äî –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è, –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                folium.PolyLine(
                    locations=[sup_coords, st.session_state.object_coords],
                    weight=3,
                    color=color,
                    dash_array="10",
                    opacity=0.6,
                    tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –ø—Ä—è–º–æ–π)"
                ).add_to(m)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–ª–∏–∫–æ–≤
        folium_map = st_folium(
            m,
            width="100%",
            height=600,
            returned_objects=["last_object_clicked"],
            key="supplier_map"
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ
        if folium_map["last_object_clicked"] is not None:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
            if handle_supplier_click(folium_map["last_object_clicked"]):
                st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
st.header("üìã –í–µ–¥–æ–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

if st.session_state.delivery_data:
    df = pd.DataFrame(st.session_state.delivery_data)
    columns_to_show = [
        "‚Ññ –ø/–ø",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        "% –æ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
        "–í–∏–¥ —Ä–∞–±–æ—Ç",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
        "–ê–¥—Ä–µ—Å",
        "–í–∏–¥ \"—Ñ—Ä–∞–Ω–∫–æ\" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %",
        "–°—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–±—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª",
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º",
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %",
        "–°—Ä–µ–¥–Ω—è—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–∫–∏, –∫–º"
    ]
    st.dataframe(df[columns_to_show], use_container_width=True)

    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    excel_href = export_to_excel(df, columns_to_show)
    st.markdown(excel_href, unsafe_allow_html=True)

    # --- –õ–µ–≥–µ–Ω–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏—Ö —Ü–≤–µ—Ç–æ–≤
    materials_used = []
    colors_used = []

    for record in st.session_state.delivery_data:
        material_name = record["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"]
        color = record["–¶–≤–µ—Ç"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª-—Ü–≤–µ—Ç
        material_color_pair = (material_name, color)
        if material_color_pair not in zip(materials_used, colors_used):
            materials_used.append(material_name)
            colors_used.append(color)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if materials_used:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ª–æ–≤–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π
        st.subheader("üìã –£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü)
        for material, color in zip(materials_used, colors_used):
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–≤–µ—Ç–Ω—ã–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            st.markdown(
                f"<div style='display: flex; align-items: center; margin-bottom: 10px;'>"
                f"<div style='background-color: {color}; width: 30px; height: 10px; margin-right: 10px;'></div>"
                f"<div>{material}</div>"
                f"</div>",
                unsafe_allow_html=True
            )

    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"):
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            m_export = folium.Map(location=st.session_state.object_coords, zoom_start=10)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
            folium.CircleMarker(
                st.session_state.object_coords,
                radius=5,
                color="red",
                fill=True,
                fill_opacity=1.0,
                popup="–ú–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞",
                tooltip="–û–±—ä–µ–∫—Ç"
            ).add_to(m_export)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
            for i, supplier in enumerate(st.session_state.selected_suppliers):
                sup_coords = supplier['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']
                idx = i + 1
                color = list(AVAILABLE_COLORS.values())[i % len(AVAILABLE_COLORS)]

                # –ú–∞—Ä–∫–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º
                folium.Marker(
                    sup_coords,
                    popup=f"‚Ññ{idx}: {supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}",
                    tooltip=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ ‚Ññ{idx}",
                    icon=folium.DivIcon(html=f"""
                    <div style="
                        background: {color};
                        color: white;
                        border-radius: 50%;
                        width: 24px;
                        height: 24px;
                        text-align: center;
                        line-height: 24px;
                        font-weight: bold;
                        font-size: 14px;
                        box-shadow: 1px 1px 3px rgba(0,0,0,0.4);
                    ">{idx}</div>""")
                ).add_to(m_export)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç (–ø–æ –¥–æ—Ä–æ–≥–∞–º –∏–ª–∏ –ø–æ –ø—Ä—è–º–æ–π)
                route_coords = supplier.get('–ú–∞—Ä—à—Ä—É—Ç')
                if route_coords:
                    folium.PolyLine(
                        locations=route_coords,
                        weight=5,
                        color=color,
                        opacity=0.8,
                        tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –¥–æ—Ä–æ–≥–∞–º)"
                    ).add_to(m_export)
                else:
                    folium.PolyLine(
                        locations=[sup_coords, st.session_state.object_coords],
                        weight=3,
                        color=color,
                        dash_array="10",
                        opacity=0.6,
                        tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –ø—Ä—è–º–æ–π)"
                    ).add_to(m_export)

            # –ü–æ–ª—É—á–∞–µ–º HTML –∫–∞—Ä—Ç—ã
            map_html = m_export._repr_html_()
            href = save_map_screenshot(map_html)
            if href:
                st.markdown(href, unsafe_allow_html=True)
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã.")
                st.success("‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")

    with col2:
        # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"):
            log_info(st.session_state, "–û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            st.session_state.delivery_data = []
            st.session_state.selected_suppliers = []
            st.rerun()

    with col3:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–æ—Ç–æ—á–µ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        if st.button("üîç –°–∫—Ä—ã—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏"):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ selected_suppliers —Å—Ç—Ä–æ–∫—É —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            st.session_state.selected_suppliers = [{
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": "–ù–∏—á–µ–≥–æ",
                "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": None,
                "–ú–∞—Ä—à—Ä—É—Ç": None,
                "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ": 0,
                "–û–ö–í–≠–î": "",
                "–¶–≤–µ—Ç": "gray"
            }]
            st.info("‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–µ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
            log_info(st.session_state, "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏")
else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã ---
def display_supplier_gui():
    st.header("üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã")

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ ---
    if 'delivery_data' not in st.session_state:
        st.session_state.delivery_data = []

    if 'geocode_cache' not in st.session_state:
        st.session_state.geocode_cache = {}

    if 'error_log' not in st.session_state:
        st.session_state.error_log = []

    if 'ors_api_key' not in st.session_state:
        st.session_state.ors_api_key = ""
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ secrets
        try:
            if 'api_keys' in st.secrets and 'ors_api_key' in st.secrets['api_keys']:
                st.session_state.ors_api_key = st.secrets['api_keys']['ors_api_key']
                log_info(st.session_state, "API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ secrets")
        except Exception as e:
            log_warning(st.session_state, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ secrets")


    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç ORS –µ—Å–ª–∏ API-–∫–ª—é—á —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    ors_client = init_ors_client(st.session_state)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
    if 'selected_suppliers' not in st.session_state:
        st.session_state.selected_suppliers = []

    if 'object_coords' not in st.session_state:
        st.session_state.object_coords = None

    if 'object_address' not in st.session_state:
        st.session_state.object_address = ""

    if 'suppliers_df' not in st.session_state:
        st.session_state.suppliers_df = None

    if 'filtered_suppliers' not in st.session_state:
        st.session_state.filtered_suppliers = None

    if 'selected_okved' not in st.session_state:
        st.session_state.selected_okved = None

    # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    st.title("–ú–æ–¥—É–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞
    def load_suppliers():
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            root = tk.Tk()
            root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (CSV)",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
            )

            if not file_path:
                st.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                return None, []

            if os.path.exists(file_path):
                df = pd.read_csv(file_path)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df = df.fillna('')
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                df['lat'] = 0.0
                df['lon'] = 0.0

                # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ G ("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                for idx, row in df.iterrows():
                    if row['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'] and isinstance(row['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'], str):
                        try:
                            lat, lon = map(float, row['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'].split(','))
                            df.at[idx, 'lat'] = lat
                            df.at[idx, 'lon'] = lon
                        except:
                            pass

                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ
                df['info'] = df.apply(lambda row: f"{row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}\n–ò–ù–ù: {row['–ò–ù–ù']}\n–ê–¥—Ä–µ—Å: {row['–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏']}", axis=1)

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –û–ö–í–≠–î –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                okved_list = df['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'].unique().tolist()
                okved_list = [x for x in okved_list if x]
                okved_list.sort()

                log_info(st.session_state, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞")

                return df, okved_list
            else:
                log_error(st.session_state, f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                st.error("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return None, []
        except Exception as e:
            log_error(st.session_state, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {str(e)}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return None, []

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    def handle_supplier_click(clicked_point):
        if clicked_point and st.session_state.object_coords and st.session_state.filtered_suppliers is not None:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
            lat, lon = clicked_point['lat'], clicked_point['lng']

            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            closest_supplier = None
            min_distance = float('inf')

            for idx, row in st.session_state.filtered_suppliers.iterrows():
                supplier_coords = (row['lat'], row['lon'])
                click_coords = (lat, lon)

                # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫–ª–∏–∫–∞ –¥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                distance = geodesic(click_coords, supplier_coords).kilometers

                # –ï—Å–ª–∏ —ç—Ç–æ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∫ –∫–ª–∏–∫—É
                if distance < min_distance and distance < 10:  # –ü–æ—Ä–æ–≥ –≤ 10 –∫–º
                    min_distance = distance
                    closest_supplier = row

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∫–ª–∏–∫–∞
            if closest_supplier is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
                supplier_name = closest_supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']
                already_selected = any(s['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'] == supplier_name for s in st.session_state.selected_suppliers)

                if not already_selected:
                    # –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ –¥–æ—Ä–æ–≥–∞–º
                    supplier_coords = (closest_supplier['lat'], closest_supplier['lon'])
                    route_coords, road_distance = get_route_ors(
                        st.session_state,
                        ors_client,
                        supplier_coords,
                        st.session_state.object_coords
                    )

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    color_name = st.session_state.get('color_select', "–°–∏–Ω–∏–π")
                    selected_color = AVAILABLE_COLORS[color_name]

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                    obj_full_addr = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {st.session_state.object_coords[0]:.5f}, {st.session_state.object_coords[1]:.5f}"
                    if st.session_state.object_address:
                        obj_full_addr = st.session_state.object_address

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                    idx = len(st.session_state.delivery_data) + 1

                    # –ó–∞–ø–∏—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                    supplier_data = {
                        "‚Ññ –ø/–ø": idx,
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": closest_supplier['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'],
                        "% –æ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏": 100,
                        "–í–∏–¥ —Ä–∞–±–æ—Ç": "–ü–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": f"{closest_supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']} (–ò–ù–ù: {closest_supplier['–ò–ù–ù']})",
                        "–ê–¥—Ä–µ—Å": closest_supplier['–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏'],
                        "–í–∏–¥ \"—Ñ—Ä–∞–Ω–∫–æ\" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": "-",
                        "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %": "-",
                        "–°—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–±—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª": obj_full_addr,
                        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º": road_distance,
                        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %": 100,
                        "–°—Ä–µ–¥–Ω—è—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–∫–∏, –∫–º": road_distance,
                        "–¶–≤–µ—Ç": selected_color,
                        "supplier_coords": supplier_coords,
                        "object_coords": st.session_state.object_coords,
                        "route_coords": route_coords,
                        "–ò–ù–ù": closest_supplier['–ò–ù–ù']
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –≤ —Å–µ—Å—Å–∏—é
                    st.session_state.delivery_data.append(supplier_data)
                    st.session_state.selected_suppliers.append({
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": closest_supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'],
                        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": supplier_coords,
                        "–ú–∞—Ä—à—Ä—É—Ç": route_coords,
                        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ": road_distance,
                        "–û–ö–í–≠–î": closest_supplier['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'],
                        "–¶–≤–µ—Ç": selected_color
                    })

                    log_info(st.session_state, f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {road_distance} –∫–º")
                    return True

        return False

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("1.–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç")

        # –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ
        use_object_coords = st.checkbox("–í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é")

        if use_object_coords:
            obj_coord_input = st.text_input("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)", "")
            if obj_coord_input:
                try:
                    lat, lon = map(float, [x.strip() for x in obj_coord_input.split(",")])
                    if -90 <= lat <= 90 and -180 <= lon <= 180:
                        st.session_state.object_coords = (lat, lon)
                        st.session_state.object_address = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}"
                        st.success("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                    else:
                        st.error("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
                except Exception as e:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, 54.7100, 20.4800")
        else:
            object_address = st.text_input(
                "–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
                value="–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª., –ì—É—Ä—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å. –ù–µ–≤—Å–∫–æ–µ, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. –ó–î. 229"
            )

            if st.button("üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞"):
                obj_coords, obj_full_addr = geocode_address_cached(st.session_state, object_address)
                if obj_coords is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é.")
                else:
                    st.session_state.object_coords = obj_coords
                    st.session_state.object_address = obj_full_addr
                    st.success(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {obj_coords[0]:.5f}, {obj_coords[1]:.5f}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        st.header("2.–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

        if st.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"):
            df, okved_list = load_suppliers()
            if df is not None:
                st.session_state.suppliers_df = df
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –û–ö–í–≠–î
        if st.session_state.suppliers_df is not None:
            st.header("3.–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –û–ö–í–≠–î
            okved_list = st.session_state.suppliers_df['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'].unique().tolist()
            okved_list = [x for x in okved_list if x]
            okved_list.sort()

            # –í—ã–±–æ—Ä –û–ö–í–≠–î
            okved_list.insert(0, "–ù–∏—á–µ–≥–æ")  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–∏—á–µ–≥–æ" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            selected_okved = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –û–ö–í–≠–î –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                okved_list,
                index=0,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ù–∏—á–µ–≥–æ" –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é..."
            )

            if selected_okved:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –û–ö–í–≠–î
                filtered_df = st.session_state.suppliers_df[
                    st.session_state.suppliers_df['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)'] == selected_okved
                ]

                st.session_state.filtered_suppliers = filtered_df
                st.session_state.selected_okved = selected_okved

                st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –û–ö–í–≠–î: {selected_okved}")

                # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –∫–∞—Ä—Ç–æ–π
                st.info("‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ—á–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≤–µ–¥–æ–º–æ—Å—Ç—å")
            else:
                st.session_state.filtered_suppliers = None
                st.session_state.selected_okved = None
                st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

        # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        if st.session_state.filtered_suppliers is not None:
            st.header("4.–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞")

            color_name = st.selectbox("–¶–≤–µ—Ç –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞", list(AVAILABLE_COLORS.keys()), key="color_select")
            selected_color = AVAILABLE_COLORS[color_name]

            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
            st.markdown(f"<div style='background-color: {selected_color}; width: 100%; height: 20px; border-radius: 5px;'></div>", unsafe_allow_html=True)

    with col2:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        st.header("–ö–∞—Ä—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if not st.session_state.ors_api_key:
            st.warning("‚ö†Ô∏è API-–∫–ª—é—á OpenRouteService –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å '–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π API-–∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'.")

        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –∑–∞–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if st.session_state.object_coords is None:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞")
        elif st.session_state.filtered_suppliers is None:
            st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –û–ö–í–≠–î")
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            m = folium.Map(location=st.session_state.object_coords, zoom_start=10)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç - –º–∞–ª–µ–Ω—å–∫–∞—è –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞
            folium.CircleMarker(
                st.session_state.object_coords,
                radius=10,  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å
                color="red",
                fill=True,
                fill_opacity=1.0,
                popup=folium.Popup("–û–±—ä–µ–∫—Ç", max_width=200),
                tooltip="–û–±—ä–µ–∫—Ç"

            ).add_to(m)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for idx, row in st.session_state.filtered_suppliers.iterrows():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                if row['lat'] != 0 and row['lon'] != 0:
                    # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                    popup_text = f"""<b>{row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}</b><br>
                                    –ò–ù–ù: {row['–ò–ù–ù']}<br>
                                    –û–ö–í–≠–î: {row['–ì–ª–∞–≤–Ω—ã–π –û–ö–í–≠–î (–Ω–∞–∑–≤–∞–Ω–∏–µ)']}<br>
                                    –ê–¥—Ä–µ—Å: {row['–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏']}"""

                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                    folium.CircleMarker(
                        [row['lat'], row['lon']],
                        popup=folium.Popup(popup_text, max_width=300),
                        tooltip=row['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'],
                        radius=5,  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å
                        color="blue",
                        fill=True,
                        fill_opacity=1.0,
                    ).add_to(m)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
            for i, supplier in enumerate(st.session_state.selected_suppliers):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                sup_coords = supplier['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']
                idx = i + 1  # –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

                # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
                color = list(AVAILABLE_COLORS.values())[i % len(AVAILABLE_COLORS)]

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º
                folium.Marker(
                    sup_coords,
                    popup=f"‚Ññ{idx}: {supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}",
                    tooltip=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ ‚Ññ{idx}",
                    icon=folium.DivIcon(html=f"""
                    <div style="
                        background: {supplier.get('–¶–≤–µ—Ç', color)};
                        color: white;
                        border-radius: 50%;
                        width: 24px;
                        height: 24px;
                        text-align: center;
                        line-height: 24px;
                        font-weight: bold;
                        font-size: 14px;
                        box-shadow: 1px 1px 3px rgba(0,0,0,0.4);
                    ">{idx}</div>""")
                ).add_to(m)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç
                route_coords = supplier['–ú–∞—Ä—à—Ä—É—Ç']
                if route_coords:
                    folium.PolyLine(
                        locations=route_coords,
                        weight=5,
                        color=supplier.get('–¶–≤–µ—Ç', color),
                        opacity=0.8,
                        tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –¥–æ—Ä–æ–≥–∞–º)"
                    ).add_to(m)
                else:
                    # –†–µ–∑–µ—Ä–≤ ‚Äî –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è, –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                    folium.PolyLine(
                        locations=[sup_coords, st.session_state.object_coords],
                        weight=3,
                        color=color,
                        dash_array="10",
                        opacity=0.6,
                        tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –ø—Ä—è–º–æ–π)"
                    ).add_to(m)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–ª–∏–∫–æ–≤
            folium_map = st_folium(
                m,
                width="100%",
                height=600,
                returned_objects=["last_object_clicked"],
                key="supplier_map"
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ
            if folium_map["last_object_clicked"] is not None:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
                if handle_supplier_click(folium_map["last_object_clicked"]):
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    st.header("üìã –í–µ–¥–æ–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    if st.session_state.delivery_data:
        df = pd.DataFrame(st.session_state.delivery_data)
        columns_to_show = [
            "‚Ññ –ø/–ø",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "% –æ—Ç –æ–±—â–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
            "–í–∏–¥ —Ä–∞–±–æ—Ç",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
            "–ê–¥—Ä–µ—Å",
            "–í–∏–¥ \"—Ñ—Ä–∞–Ω–∫–æ\" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %",
            "–°—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–±—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª",
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –∫–º",
            "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ %",
            "–°—Ä–µ–¥–Ω—è—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–∫–∏, –∫–º"
        ]
        st.dataframe(df[columns_to_show], use_container_width=True)

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        excel_href = export_to_excel(df, columns_to_show)
        st.markdown(excel_href, unsafe_allow_html=True)

        # --- –õ–µ–≥–µ–Ω–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏—Ö —Ü–≤–µ—Ç–æ–≤
        materials_used = []
        colors_used = []

        for record in st.session_state.delivery_data:
            material_name = record["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"]
            color = record["–¶–≤–µ—Ç"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª-—Ü–≤–µ—Ç
            material_color_pair = (material_name, color)
            if material_color_pair not in zip(materials_used, colors_used):
                materials_used.append(material_name)
                colors_used.append(color)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if materials_used:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ª–æ–≤–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π
            st.subheader("üìã –£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü)
            for material, color in zip(materials_used, colors_used):
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–≤–µ—Ç–Ω—ã–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                st.markdown(
                    f"<div style='display: flex; align-items: center; margin-bottom: 10px;'>"
                    f"<div style='background-color: {color}; width: 30px; height: 10px; margin-right: 10px;'></div>"
                    f"<div>{material}</div>"
                    f"</div>",
                    unsafe_allow_html=True
                )

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"):
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                m_export = folium.Map(location=st.session_state.object_coords, zoom_start=10)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
                folium.CircleMarker(
                    st.session_state.object_coords,
                    radius=5,
                    color="red",
                    fill=True,
                    fill_opacity=1.0,
                    popup="–ú–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞",
                    tooltip="–û–±—ä–µ–∫—Ç"
                ).add_to(m_export)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
                for i, supplier in enumerate(st.session_state.selected_suppliers):
                    sup_coords = supplier['–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']
                    idx = i + 1
                    color = list(AVAILABLE_COLORS.values())[i % len(AVAILABLE_COLORS)]

                    # –ú–∞—Ä–∫–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º
                    folium.Marker(
                        sup_coords,
                        popup=f"‚Ññ{idx}: {supplier['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏']}",
                        tooltip=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ ‚Ññ{idx}",
                        icon=folium.DivIcon(html=f"""
                        <div style="
                            background: {color};
                            color: white;
                            border-radius: 50%;
                            width: 24px;
                            height: 24px;
                            text-align: center;
                            line-height: 24px;
                            font-weight: bold;
                            font-size: 14px;
                            box-shadow: 1px 1px 3px rgba(0,0,0,0.4);
                        ">{idx}</div>""")
                    ).add_to(m_export)

                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç (–ø–æ –¥–æ—Ä–æ–≥–∞–º –∏–ª–∏ –ø–æ –ø—Ä—è–º–æ–π)
                    route_coords = supplier.get('–ú–∞—Ä—à—Ä—É—Ç')
                    if route_coords:
                        folium.PolyLine(
                            locations=route_coords,
                            weight=5,
                            color=color,
                            opacity=0.8,
                            tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –¥–æ—Ä–æ–≥–∞–º)"
                        ).add_to(m_export)
                    else:
                        folium.PolyLine(
                            locations=[sup_coords, st.session_state.object_coords],
                            weight=3,
                            color=color,
                            dash_array="10",
                            opacity=0.6,
                            tooltip=f"{supplier['–û–ö–í–≠–î']} ‚Üí {supplier['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ']} –∫–º (–ø–æ –ø—Ä—è–º–æ–π)"
                        ).add_to(m_export)

                # –ü–æ–ª—É—á–∞–µ–º HTML –∫–∞—Ä—Ç—ã
                map_html = m_export._repr_html_()
                href = save_map_screenshot(map_html)
                if href:
                    st.markdown(href, unsafe_allow_html=True)
                    st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã.")
                    st.success("‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!")
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")

        with col2:
            # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"):
                log_info(st.session_state, "–û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
                st.session_state.delivery_data = []
                st.session_state.selected_suppliers = []
                st.rerun()

        with col3:
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–µ–æ—Ç–æ—á–µ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            if st.button("üîç –°–∫—Ä—ã—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏"):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ selected_suppliers —Å—Ç—Ä–æ–∫—É —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                st.session_state.selected_suppliers = [{
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": "–ù–∏—á–µ–≥–æ",
                    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": None,
                    "–ú–∞—Ä—à—Ä—É—Ç": None,
                    "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ": 0,
                    "–û–ö–í–≠–î": "",
                    "–¶–≤–µ—Ç": "gray"
                }]
                st.info("‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–µ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
                log_info(st.session_state, "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å.")
