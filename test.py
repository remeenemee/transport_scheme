import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import requests
import re

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
YANDEX_API_KEY = "e43928ca-d7b8-47fc-a556-d13d59675c24"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
GEOCODER_URL = "https://geocode-maps.yandex.ru/1.x/"


# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π ===
def normalize_address(raw_address: str) -> str:
    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å (6 —Ü–∏—Ñ—Ä)
    address = re.sub(r'\b\d{6}\b,?\s*', '', raw_address).strip()
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
    address = re.sub(r'\s+', ' ', address)
    address = re.sub(r'\s*,\s*', ', ', address)
    address = address.strip(' ,')

    # –ó–∞–º–µ–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    replacements = {
        r'\b–†\-–ù\b': '—Ä–∞–π–æ–Ω',
        r'\b–°\b': '—Å.',
        r'\b–ü\b': '–ø.',
        r'\b–†–ü\b': '—Ä–ø',
        r'\b–ì\b': '–≥.',
        r'\b–ü–ì–¢\b': '–ø–≥—Ç',
        r'\b–£–õ\.?\b': '—É–ª.',
        r'\b–î\.?\b': '–¥.',
        r'\b–î–í–õ–î\.?\b': '–¥–≤–ª–¥.',
        r'\b–ó–î\.?\b': '–∑–¥.',
        r'\b–ü–ï–†\.?\b': '–ø–µ—Ä.',
        r'\b–ü–õ\.?\b': '–ø–ª.',
        r'\b–ú–ö–†\b': '–º–∫—Ä',
        r'\b–°–ï–õ–¨–°–û–í–ï–¢\b': '—Å/—Å',
    }
    for pattern, repl in replacements.items():
        address = re.sub(pattern, repl, address, flags=re.IGNORECASE)

    return address.strip(' ,')


# === –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Yandex ===
def geocode_address_yandex(address: str):
    try:
        params = {
            "apikey": YANDEX_API_KEY,
            "geocode": address,
            "format": "json",
            "results": 1
        }
        response = requests.get(GEOCODER_URL, params=params, timeout=10)
        if response.status_code != 200:
            return None, f"–û—à–∏–±–∫–∞: –∫–æ–¥ {response.status_code}"

        data = response.json()
        try:
            obj = data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
            lon, lat = map(float, obj["Point"]["pos"].split())
            full_address = obj["metaDataProperty"]["GeocoderMetaData"]["text"]
            return (lat, lon, full_address), None
        except (KeyError, IndexError):
            return None, "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"


class AddressGeocoderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìç –ì–µ–æ–∫–æ–¥–µ—Ä (Yandex API)")
        self.root.geometry("750x650")
        self.root.resizable(False, False)

        self.create_widgets()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.root, text="–ì–µ–æ–∫–æ–¥–µ—Ä –∞–¥—Ä–µ—Å–æ–≤ (Yandex)", font=("Arial", 14, "bold"))
        title.pack(pady=10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = tk.Frame(self.root)
        input_frame.pack(pady=10, padx=20, fill="x")

        tk.Label(input_frame, text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", font=("Arial", 10)).pack(anchor="w")
        self.address_entry = tk.Entry(input_frame, font=("Arial", 11), width=80)
        self.address_entry.pack(fill="x", pady=5)
        self.setup_entry_bindings()

        # –ö–Ω–æ–ø–∫–∞
        btn_frame = tk.Frame(self.root)
        btn_frame.pack(pady=5)
        self.search_button = tk.Button(
            btn_frame,
            text="üîç –ù–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            font=("Arial", 10, "bold"),
            bg="#1E90FF",
            fg="white",
            command=self.geocode
        )
        self.search_button.pack()

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_frame = tk.LabelFrame(self.root, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", padx=10, pady=10)
        result_frame.pack(pady=10, padx=20, fill="both", expand=True)

        self.result_text = scrolledtext.ScrolledText(result_frame, height=22, font=("Courier", 10))
        self.result_text.pack(fill="both", expand=True)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_text)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
        self.context_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å", command=lambda: self.address_entry.delete(0, tk.END))
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", command=self.copy_result)

    def setup_entry_bindings(self):
        self.address_entry.bind("<Control-v>", self.paste_text)
        self.address_entry.bind("<Control-c>", self.copy_text)
        self.address_entry.bind("<Control-x>", self.cut_text)
        self.address_entry.bind("<Button-3>", self.show_context_menu_input)
        self.result_text.bind("<Button-3>", self.show_context_menu_output)

    def paste_text(self, event=None):
        try:
            self.address_entry.insert(tk.INSERT, self.root.clipboard_get())
        except tk.TclError:
            pass
        return "break"

    def copy_text(self, event=None):
        try:
            selected = self.address_entry.selection_get()
            self.root.clipboard_clear()
            self.root.clipboard_append(selected)
        except tk.TclError:
            pass
        return "break"

    def cut_text(self, event=None):
        self.copy_text()
        try:
            self.address_entry.delete(tk.SEL_FIRST, tk.SEL_LAST)
        except tk.TclError:
            pass
        return "break"

    def show_context_menu_input(self, event):
        self.context_menu.tk_popup(event.x_root, event.y_root)

    def show_context_menu_output(self, event):
        self.context_menu.tk_popup(event.x_root, event.y_root)

    def copy_result(self):
        content = self.result_text.get(1.0, tk.END).strip()
        if content:
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    def geocode(self):
        raw_address = self.address_entry.get().strip()
        if not raw_address:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å!")
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        cleaned = normalize_address(raw_address)

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π: {raw_address}\n")
        self.result_text.insert(tk.END, f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π: {cleaned}\n\nüîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...\n")
        self.root.update()

        # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        coords, error = geocode_address_yandex(cleaned)

        if coords:
            lat, lon, full_found = coords
            result = (
                f"üéØ –£–°–ü–ï–®–ù–û\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª: {raw_address}\n"
                f"–û—á–∏—â–µ–Ω–æ: {cleaned}\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {full_found}\n"
                f"–®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
                f"–î–æ–ª–≥–æ—Ç–∞: {lon:.6f}\n"
                f"–¢–æ—á–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è"
            )
        else:
            result = f"‚ùå –û—à–∏–±–∫–∞\n{error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, result)


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    root = tk.Tk()
    app = AddressGeocoderApp(root)
    root.mainloop()